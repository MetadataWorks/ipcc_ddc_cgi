#!/usr/local/bin/python2.4
# -*- coding: utf-8 -*-
# vim:set termencoding=iso-8859-2 encoding=utf-8:
#
# Internet Survey Engine
# Copyright (C) 2004 Maciej Blizi≈Ñski <m.blizinski@wsisiz.edu.pl>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
# USA.


### copied from wizard.py ###

import libxml2
import libxslt
import xml.dom.minidom
from xml import xpath
from ConfigParser import SafeConfigParser
##from ConfigParser import ConfigParser as SafeConfigParser

import cgi
import cgitb; cgitb.enable()
import sys
import os
import locale
import time
import string

## need to explicitly set selected values as recorded in hidden fields into the features.
## this is getting very messy.
## The obtainValue method picks up the stuff from the form and puts in in XML for use
## in the following page. 
## But this is not preserved in the reverse stage.
## 
## mnj (1) conf_dir added, to keep ancillary files separate from cgi-bin
conf_dir = "/var/www/ipccddc_site/survey_conf/"
## debug = True prints extra info on some screens
debug = False
## end mnj ##

def XSLTTrans(xmldoc, xsldoc, params = None):
    """Transforms the xmldoc with xsldoc, and returns the string."""
    # print "params: %s" % params
    oo = open( '/tmp/mnj_websurvey3.txt', 'w' )
    styledoc = libxml2.parseDoc(xsldoc)
    style = libxslt.parseStylesheetDoc(styledoc)
    doc2t = libxml2.parseDoc(xmldoc)
    result = style.applyStylesheet(doc2t, params)
    oo.write( 'x\n' )
    stringresult = style.saveResultToString(result)
    oo.write( 'y\n' )
    oo.close()
    style.freeStylesheet()
    doc2t.freeDoc()
    result.freeDoc()
    return stringresult

class WebSurvey:
    def __init__(self, form, surveyFileName):
        self.oo = open( '/tmp/mnj_websurvey2.txt', 'w' )
        self.oo.write( 'Initialsiing websurvey xxxx\n' )
        self.form = form
        self.doc = xml.dom.minidom.parse(surveyFileName)
        self.wizard = self.doc.documentElement
        for dataField in xpath.Evaluate("//dataField",
                self.doc.documentElement):
          widgets = dataField.getElementsByTagName('widget')
          if len(widgets) > 0:
            name = widgets[0].getAttribute("name")
          else:
            raise 'invalid datafield'
          self.oo.write( name + '\n' )
          typ = widgets[0].getAttribute("type")
          if typ in ["features"]:
             if self.form.has_key( string.lower(name.encode("utf-8")) ):
                v = self.form[string.lower(name.encode("utf-8"))]
                if v == None:
                  self.oo.write( 'no value\n' )
                elif type(v) == type( [] ):
                  if len(v) == 0:
                     self.oo.write( 'zero length list\n' )
                  else:
                    for i in v:
                      self.oo.write( i.name + '::' + i.value + '\n' )
                else:
                  self.oo.write( str( type( v ) ) )
        self.config = SafeConfigParser()
        self.config.read(conf_dir + "wizard.conf")
        # determine, which page was submitted, if any
        if self.form.has_key("screen_no"):
            try:
                self.sentscreen = int(form["screen_no"].value)
                # self.nextscreen = self.sentscreen + 1
                # print '<pre>got screen_no: %s</pre>' % self.sentscreen
            except:
                self.sentscreen = None
                # self.nextscreen = 0
                # print '<pre>got screen_no but no luck in conversion to integer: %s</pre>' % form["screen_no"].value
        else:
            self.sentscreen = None
            # self.nextscreen = 0
            # print '<pre>didn\'t get screen_no: %s</pre>' % self.sentscreen
        return
    def processSurvey(self):
        # if not self.form.has_key("survey_data"):
        #     return
# process all fields
        ##  self.doc.documentElement is the xml document describing the survey ##
        oo = open( '/research/home/tmp/mnj_wizard_ov.txt', 'w' )
        for dataField in xpath.Evaluate("//dataField", self.doc.documentElement):
            df = WebSurveyDataField(dataField)
            ov = df.obtainValue(self.form)
            oo.write( ov + '\n' )
    ### extra bit for fields collected and not displayed.
        for dataField in xpath.Evaluate("//scrin", self.doc.documentElement):
            df = WebSurveyDataField(dataField)
            if self.form.has_key( "appname" ):
              df.setValue(self.form["appname"].value.decode('utf-8'))
              oo.write( self.form["appname"].value.decode('utf-8') + '\n' )
        oo.close()
        # if user pressed back button, we shouldn't validate what he/she
        # had entered. We can pass entered values, but we can validate
        # them later.
        if form.has_key("backbutton"):
            self.sentscreen -= 1
        if form.has_key("survey_data"):
            for dataField in xpath.Evaluate("//dataField[count(parent::dataFields/parent::wizardScreen/preceding::wizardScreen) <= %s]" % self.sentscreen,
                    self.doc.documentElement):
                df = WebSurveyDataField(dataField)
                df.validateValue()
# if all the filled fields are ok, advance to the next screen of the
            # wizard
        if self.sentscreen is None:
            self.nextscreen = 0
        elif self.form.has_key("backbutton"):
            self.nextscreen = self.sentscreen
        else:
            if len(xpath.Evaluate("//dataField[@valid = 'no']",
                self.doc.documentElement)) == 0:
                self.nextscreen = self.sentscreen + 1
            else:
                self.nextscreen = self.sentscreen
# if the survey is filled in properly, store the data
        if len(xpath.Evaluate("//dataField", self.doc.documentElement)) \
                == len(xpath.Evaluate("//dataField[@valid = 'yes']", self.doc.documentElement)): 
            # print "<pre>survey OK</pre>"
            # print self.doc.toxml().encode("utf-8")
            exportXML = XSLTTrans(self.doc.toxml().encode("utf-8"), open(conf_dir + "export.xsl").read())
            # print exportXML
            exportDoc = xml.dom.minidom.parseString(exportXML)
            wizardProcessing = self.doc.createElement("wizardProcessing")
            self.wizard.appendChild(wizardProcessing)
            wizardProcessing.appendChild(exportDoc.documentElement)
            # print "<pre>%s</pre>" % XSLTTrans(self.doc.toxml().encode("utf-8"), open("wizard-insert.xsl").read())
            insertQry = XSLTTrans(self.doc.toxml().encode("utf-8"), open(conf_dir + "wizard-insert.xsl").read())
            oo = open( '/research/home/tmp/mnj_wizard_out.txt', 'w' )
            oo.write( insertQry )
            oo.close()
            import pg
            db = pg.DB(
                                  self.config.get("database", "dbname"),
                    user        = self.config.get("database", "user"),
                    passwd      = self.config.get("database", "passwd"),
                    host        = self.config.get("database", "host"),
                    )
            try:
                # print '<pre>Connecting to the database</pre>'
                assert not db is None, 'Database cannot be None'
                # print '<pre>%s</pre>' % insertQry
                if debug:
                  print insertQry
                db.query(insertQry)
            ##except pg.error, error_message:
                # TODO: nicer error logging
                ##print '<pre>Error: %s</pre>' % error_message
            except:
                print '<pre>insert problem! failed to insert data in database</pre>'
                if not debug:
                  print insertQry
            db.close()
        return
    def getXML(self):
        return self.doc.toxml().encode("utf-8")
    def getHTML(self):
        # return "Content-type: text/html; charset=utf-8\n\n" \
        #         + XSLTTrans(self.getXML(), open("wizard.xsl").read())
        self.processSurvey()
        return XSLTTrans(self.getXML(), open(conf_dir + "wizard.xsl").read(),
            {
                "screen_no": "'%s'" % self.nextscreen, # gotcha!  apostrophes needed
            }
        )

class WebSurveyDataField:
    def __init__(self, domElement, eltype='widget'):
        self.domElement = domElement
        # self.widget = self.domElement.getElementsByTagName("widget")[0]
        if eltype == 'widget':
          widgets = self.domElement.getElementsByTagName("widget")
          if len(widgets) > 0:
            self.widgetType = widgets[0].getAttribute("type")
            if self.widgetType in ["text", "area", "chooser", "radio", "hidden-java"]:
                self.w = TextWidget(widgets[0])
                self.w.wty = 'text'
            elif self.widgetType in ["features"]:
                ##self.w = FeaturesWidget(widgets[0])
                self.w = TextWidget(widgets[0])
                self.w.wty = 'feature'
            else:
                raise "unxepected widget"
                pass # shouldn't happen
            self.w.widgetType = self.widgetType
          else:
                self.w = TextWidget(domElement)
                self.w.wty = 'text'
            
        else:
          inputs = self.domElement.getElementsByTagName("input")
          self.widgetType = inputs[0].getAttribute("type")
          if self.widgetType == "hidden":
              self.w = TextWidget(inputs[0])
          else:
              raise "unxepected widget"
              pass # shouldn't happen
        return
    def getXML(self):
        return self.dataDoc.toxml()
    def validateValue(self):
        if self.w.validateValue():
            self.markValid()
        else:
            self.markInvalid()
    def markInvalid(self):
        self.domElement.setAttribute("valid", "no")
        return
    def markValid(self):
        self.domElement.setAttribute("valid", "yes")
        return
    def setValue(self, value):
        self.w.setValue(value)
        return
    def obtainValue(self, form):
        return self.w.obtainValue(form)

    def isMandatory(self):
        if self.domElement.getAttribute("mandatory") == "yes":
            return True
        else:
            return False

class GeneralWidget:
    """This would be an abstract class if only abstract classes
    were implemented in Python"""
    def __init__(self, domElement):
        self.domElement = domElement
        self.doc = xml.dom.minidom.Document()
        return 
    def obtainValue(self, form):
        ov = 'ov'
        ov += string.join( form.keys(), '=' )
        ws = self.domElement.getElementsByTagName('widget')
            
        for w in ws:
          entries = w.getElementsByTagName('dictionaryEntry')
          typ = w.getAttribute( "type" )
          es = []
          ov += '\n' + typ + '\n'
          for e in entries:
                c = e.getElementsByTagName('code')[0]
                ov += '\n====' + str( c.lastChild.data ) + '===='
                if form.has_key( str( c.lastChild.data ) ):
## problem was in xml -> html, needed checkbox='checked', get server crash if you set it to yes.
                      if typ == 'radio':
                        es.append(e)
                      else:
                        e.setAttribute("xxchecked", "yes")
                        e.setAttribute("selected", "yes")
                        ov += ' selected (not) '
                      ov += '\n' + str( dir( e ) ) + ';;;\n'
          if typ == 'radio':
             if len(es) > 0:
               ess = es[-1]
               raise "what"
               for e in entries:
                 e.setAttribute("checked", "no")
                 e.setAttribute("selected", "no")
               ess.setAttribute("checked", "yes")
               ess.setAttribute("selected", "yes")
    ## not working for features, cos' stuff is not put in hidden under widget name.
	if self.wty == 'feature':
              entries = self.domElement.getElementsByTagName('dictionaryEntry')
              ov += '> > feature \n'
              for e in entries:
                c = e.getElementsByTagName('code')[0]
                name = c.lastChild.data
                ov += '> > ' + name
                if form.has_key(name):
                    e.setAttribute("xxchecked", "yes")
                    ov += '> checked \n'
        if form.has_key(self.domElement.getAttribute("name")):
            es = []
            if (type(form[self.domElement.getAttribute("name")]) == type([])) or (self.wty == 'feature') or (self.widgetType == 'radio'):
                # print "<pre>%s is a list: %s</pre>" \
                #         % (self.domElement.getAttribute("name"), repr(form[self.domElement.getAttribute("name")]))
              fieldlist = form[self.domElement.getAttribute("name")]
              if type( fieldlist ) != type( [] ):
                fieldlist = [fieldlist]
              entries = self.domElement.getElementsByTagName('dictionaryEntry')
              for e in entries:
                c = e.getElementsByTagName('code')[0]
                ov += '====' + c.lastChild.data + '===='
                if c.lastChild.data in map( lambda x: x.value.decode('utf-8'), fieldlist):
                    ov += '>>>> checked \n'
                    e.setAttribute("checked", "yes")
                    es.append(e)
                if form.has_key( c.lastChild.data ):
                    e.setAttribute("checked", "yes")
                    es.append(e)
                    ov += '> checked \n'
              ##for fld in fieldlist:
                ##print "<p>field: %s, value: %s</p>" % (repr(field), field.value)
                ##dictionaryEntry = xpath.Evaluate("widgetDictionary/dictionaryEntry[code = '%s']" \
                        ##% fld.value, self.domElement)[0]
                ##dictionaryEntry.setAttribute("selected", "yes")
                ##self.setValue(fld.value.decode('utf-8'))
                ## need to figure out how to set the XML elements from the form.
              if self.widgetType == 'radio':
                    entries = self.domElement.getElementsByTagName('dictionaryEntry')
                    for e in entries:
                      e.setAttribute("checked", "no")
                      e.setAttribute("selected", "no")
                    if len(es) > 0:
                        e = es[-1]
                        e.setAttribute("checked", "yes")
                        e.setAttribute("selected", "yes")
                    else:
                        raise 'none set'
            elif form[self.domElement.getAttribute("name")].value:
                # print "<pre>%s has value: %s</pre>" \
                #         % ( \
                #             self.domElement.getAttribute("name"), \
                #             form[self.domElement.getAttribute("name")].value, \
                #         )
                if self.widgetType == 'radio':
                    entries = self.domElement.getElementsByTagName('dictionaryEntry')
                    raise 'here'
                    for e in entries:
                      e.setAttribute("checked", "no")
                   
                self.setValue(form[self.domElement.getAttribute("name")].value.decode('utf-8'))
        return ov
    def setValue(self, value):
        # self.domElement.setAttribute("value", value)
        # print "<pre>setValue(%s)</pre>" % value
# check if we have value
        if self.domElement.getElementsByTagName("value") == []:
            valueElement = self.doc.createElement("value")
            valueElement.appendChild(self.doc.createTextNode(value))
            self.domElement.appendChild(valueElement)
        else:
            oldvalue = self.domElement.getElementsByTagName("value")[0]
            newvalue = self.doc.createElement("value")
            newvalue.appendChild(self.doc.createTextNode(value))
            self.domElement.replaceChild(newvalue, oldvalue)
        return
    def getValue(self):
        try:
            return self.domElement.getElementsByTagName("value")[0].childNodes[0].data
        except:
            return None
    def validateValue(self):
        if not self.getValue() and self.isMandatory():
            # print "<p>%s: missing Mandatory field</p>" \
            #     % self.domElement.getAttribute("name")
            return False
        if self.domElement.parentNode.getAttribute("datatype") == "integer":
            if self.getValue():
                try:
                    checkInt = int(self.getValue())
                    return True
                except:
                    return False
        return True
    def isMandatory(self):
        # print "<pre>mandatory: %s</pre>" % self.domElement.parentNode.getAttribute("mandatory")
        if self.domElement.parentNode.getAttribute("mandatory") == "yes":
            return True
        else:
            return False


class TextWidget(GeneralWidget):
    """TextWiget inherits everything from GeneralWidget"""
    pass

class AreaWidget(GeneralWidget):
    """TextWiget inherits everything from GeneralWidget"""
    pass


class FeaturesWidget(GeneralWidget):
    def obtainValue(self, form):
        name = string.lower( self.domElement.getAttribute("name") )
        
        if form.has_key(name):
            # print "<p>there is something: %s</p>" % repr(form[self.domElement.getAttribute("name")])
            if type(form[name]) == type([]):
                # print "<p>it's a list</p>"
                fieldlist = form[name]
            else:
                # print "<p>it's singleton</p>"
                fieldlist = [form[name]]
            for field in fieldlist:
                ##print "<p>field: %s, value: %s</p>" % (repr(field), field.value)
                dictionaryEntry = xpath.Evaluate("widgetDictionary/dictionaryEntry[code = '%s']" \
                        % field.value, self.domElement)[0]
                dictionaryEntry.setAttribute("selected", "yes")
        else:
            # print "<p>no key: %s</p>" % self.domElement.getAttribute("name")
            ##pass
            fieldlist = []
        return fieldlist
        # for entry in xpath.Evaluate("//dictionaryEntry", self.domElement):

    def setxxValue(self, value):
        print "<p>FIXME: FeaturesWidget: setValue</p>"
        raise 'feature set'

    def getValue(self):
        print "<p>FIXME: FeaturesWidget: getValue</p>"
        raise 'feature get'
    
    def validateValue(self):
        # print "<p>FIXME: FeaturesWidget: validateValue</p>"
        return True


#######################################################################
## Main Part
#######################################################################

form = cgi.FieldStorage()
oo = open( '/research/home/tmp/mnj_wizard_form.txt', 'w' )
for k in form.keys():
  oo.write( '%s::%s\n' % (k,form[k]) )
oo.close()

dict = cgi.UserDict.UserDict()
oo = open( '/research/home/tmp/mnj_wizard_dict.txt', 'w' )
for k in dict.keys():
   oo.write( '%s::%s\n' % (k,dict[k]) )
oo.close()

print "Content-type: text/html; charset=utf-8\n"
ws = WebSurvey(form, conf_dir + "wizard.xml")
ws.oo.write( 'done initialisation, calling getHTML\n' )
ws.oo.close()
# print "<code>%s</code>" % repr(form)
print ws.getHTML()
  ##print ws.getXML()
##print 'done'
###### mnj ########
##oo = open( '/research/home/tmp/test.html', 'w' )
##oo.write( ws.getHTML() )
##oo.close()
